*) Avoid PKCS #1 v1.5 signature attack discovered by Daniel Bleichenbacher
(CVE-2006-4339)  [Ben Laurie; Google Security Team]
--- openssl-0.9.7a/crypto/rsa/rsa_sign.c.short-padding	2003-01-30 18:37:46.000000000 +0100
+++ openssl-0.9.7a/crypto/rsa/rsa_sign.c	2006-09-04 12:47:38.000000000 +0200
@@ -190,6 +190,23 @@
 		sig=d2i_X509_SIG(NULL,&p,(long)i);
 
 		if (sig == NULL) goto err;
+
+                /* Excess data can be used to create forgeries */
+                if(p != s+i)
+                        {
+                        RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
+                        goto err;
+                        }
+
+                /* Parameters to the signature algorithm can also be used to
+                   create forgeries */
+                if(sig->algor->parameter &&
+                      (ASN1_TYPE_get(sig->algor->parameter) != V_ASN1_NULL))
+                        {
+                        RSAerr(RSA_F_RSA_VERIFY,RSA_R_BAD_SIGNATURE);
+                        goto err;
+                        }
+
 		sigtype=OBJ_obj2nid(sig->algor->algorithm);
 
 
--- openssl-0.9.7a/crypto/rsa/rsa_err.c.short-padding	2001-07-25 19:02:58.000000000 +0200
+++ openssl-0.9.7a/crypto/rsa/rsa_err.c	2006-09-04 12:48:51.000000000 +0200
@@ -120,6 +120,7 @@
 {RSA_R_N_DOES_NOT_EQUAL_P_Q              ,"n does not equal p q"},
 {RSA_R_OAEP_DECODING_ERROR               ,"oaep decoding error"},
 {RSA_R_PADDING_CHECK_FAILED              ,"padding check failed"},
+{RSA_R_PKCS1_PADDING_TOO_SHORT           ,"pkcs1 padding too short"},
 {RSA_R_P_NOT_PRIME                       ,"p not prime"},
 {RSA_R_Q_NOT_PRIME                       ,"q not prime"},
 {RSA_R_RSA_OPERATIONS_NOT_SUPPORTED      ,"rsa operations not supported"},
--- openssl-0.9.7a/crypto/rsa/rsa_eay.c.short-padding	2006-08-07 16:00:02.000000000 +0200
+++ openssl-0.9.7a/crypto/rsa/rsa_eay.c	2006-09-04 12:47:38.000000000 +0200
@@ -606,6 +606,15 @@
 		{
 	case RSA_PKCS1_PADDING:
 		r=RSA_padding_check_PKCS1_type_1(to,num,buf,i,num);
+		/* Generally signatures should be at least 2/3 padding, though
+		   this isn't possible for really short keys and some standard
+		   signature schemes, so don't check if the unpadded data is
+		   small. */
+		if(r > 42 && 3*8*r >= BN_num_bits(rsa->n))
+                       {
+                       RSAerr(RSA_F_RSA_EAY_PUBLIC_DECRYPT, RSA_R_PKCS1_PADDING_TOO_SHORT);
+                       goto err;
+                       }
 		break;
 	case RSA_NO_PADDING:
 		r=RSA_padding_check_none(to,num,buf,i,num);
--- openssl-0.9.7a/crypto/rsa/rsa.h.short-padding	2006-08-07 16:00:02.000000000 +0200
+++ openssl-0.9.7a/crypto/rsa/rsa.h	2006-09-04 12:47:38.000000000 +0200
@@ -348,6 +348,7 @@
 #define RSA_R_N_DOES_NOT_EQUAL_P_Q			 127
 #define RSA_R_OAEP_DECODING_ERROR			 121
 #define RSA_R_PADDING_CHECK_FAILED			 114
+#define RSA_R_PKCS1_PADDING_TOO_SHORT                    105
 #define RSA_R_P_NOT_PRIME				 128
 #define RSA_R_Q_NOT_PRIME				 129
 #define RSA_R_RSA_OPERATIONS_NOT_SUPPORTED		 130
