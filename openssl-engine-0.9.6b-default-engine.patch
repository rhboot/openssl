--- openssl-engine-0.9.6b/ssl/ssl_algs.c	Thu Aug  9 14:20:54 2001
+++ openssl-engine-0.9.6b/ssl/ssl_algs.c	Thu Aug  9 14:41:08 2001
@@ -57,10 +57,101 @@
  */
 
 #include <stdio.h>
+#include <stdlib.h>
+#include <openssl/conf.h>
+#include <openssl/engine.h>
 #include <openssl/objects.h>
 #include <openssl/lhash.h>
+#include <openssl/x509.h>
 #include "ssl_locl.h"
 
+static void engine_init_default(const char *filename)
+	{
+	LHASH *conf;
+	ENGINE *e;
+	long eline, methods;
+	char conffile[255];
+	char *def = NULL, *rsa = NULL, *dsa = NULL, *dh = NULL, *rand = NULL,
+	     *bnmodexp = NULL, *bnmodexpcrt = NULL;
+
+	/* Build the name of the default system-wide configuration file.  The
+	 * VMS-specific part of this comes from the openssl app. */
+	strcpy(conffile,X509_get_default_cert_area());
+#ifndef VMS
+	strcat(conffile,"/");
+#endif
+	strcat(conffile,filename?:OPENSSL_CONF);
+
+	/* Read the default configuration file. */
+#ifdef USE_WIN32
+	CONF_set_default_method(CONF_WIN32);
+#endif
+	conf=CONF_load(NULL,conffile,&eline);
+	if (conf == NULL)
+		{
+		ERR_load_crypto_strings();
+		/* swallow the error */
+		return;
+		}
+
+	def=CONF_get_string(conf,"engine","default");
+	rsa=CONF_get_string(conf,"engine","rsa");
+	dsa=CONF_get_string(conf,"engine","dsa");
+	dh=CONF_get_string(conf,"engine","dh");
+	rand=CONF_get_string(conf,"engine","rand");
+	bnmodexp=CONF_get_string(conf,"engine","bn_mod_exp");
+	bnmodexpcrt=CONF_get_string(conf,"engine","bn_mod_exp_crt");
+
+	/* If we have method-specific engines specified, but no default, set
+	 * the default to the built-in software routines. */
+	if (def == NULL)
+		if(rsa || dsa || dh || rand || bnmodexp || bnmodexpcrt)
+			def="openssl";
+		else
+			{
+			CONF_free(conf);
+			return;
+			}
+	if(def != NULL)
+		{
+		e = ENGINE_by_id(def);
+		if(ENGINE_set_default(e, ENGINE_METHOD_ALL))
+			ENGINE_free(e);
+		}
+
+	/* Iterate over the list of available engines, and set them up as
+	 * defaults for all of the methods that are supposed to use them. We
+	 * do things this way to avoid attempting to initialize any engine
+	 * more than once. */
+	for(e=ENGINE_get_first(); e != NULL; e=ENGINE_get_next(e))
+		{
+		if(strcmp(ENGINE_get_id(e),def?:"openssl") == 0)
+			continue;
+		methods=0;
+		if(rsa && (strcmp(ENGINE_get_id(e),rsa) == 0))
+			methods |= ENGINE_METHOD_RSA;
+		if(dsa && (strcmp(ENGINE_get_id(e),dsa) == 0))
+			methods |= ENGINE_METHOD_DSA;
+		if(dh && (strcmp(ENGINE_get_id(e),dh) == 0))
+			methods |= ENGINE_METHOD_DH;
+		if(rand && (strcmp(ENGINE_get_id(e),rand) == 0))
+			methods |= ENGINE_METHOD_RAND;
+		if(bnmodexp && (strcmp(ENGINE_get_id(e),bnmodexp) == 0))
+			methods |= ENGINE_METHOD_BN_MOD_EXP;
+		if(bnmodexpcrt && (strcmp(ENGINE_get_id(e),bnmodexpcrt) == 0))
+			methods |= ENGINE_METHOD_BN_MOD_EXP_CRT;
+		if(methods != 0)
+			{
+			if(ENGINE_set_default(e, methods))
+				ENGINE_free(e);
+			}
+		}
+
+	CONF_free(conf);
+
+	return;
+	}
+
 int SSL_library_init(void)
 	{
 #ifndef NO_DES
@@ -102,6 +193,7 @@
 	EVP_add_digest(EVP_sha());
 	EVP_add_digest(EVP_dss());
 #endif
+	engine_init_default(NULL);
 	return(1);
 	}
 
